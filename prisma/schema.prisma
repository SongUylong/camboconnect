// This is your Prisma schema file for CamboConnect
// Learn more about Prisma: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth Models
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// User model for authentication and profiles
model User {
  id                String              @id @default(uuid())
  email             String              @unique
  password          String?             // Null if using social auth only
  firstName         String
  lastName          String
  profileImage      String?
  bio               String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  isAdmin           Boolean             @default(false)
  isSetup           Boolean             @default(false)
  twoFactorEnabled  Boolean             @default(false)
  twoFactorMethod   TwoFactorMethod?
  privacyLevel      PrivacyLevel        @default(ONLY_ME)
  educationPrivacy  PrivacyLevel        @default(ONLY_ME)
  experiencePrivacy PrivacyLevel        @default(ONLY_ME)
  skillsPrivacy     PrivacyLevel        @default(ONLY_ME)
  contactUrlPrivacy PrivacyLevel        @default(ONLY_ME)
  bookmarks         Bookmark[]
  applications      Application[]
  notifications     Notification[]
  followedOrgs      Follow[]            @relation("userFollows")
  friendRequestsSent     FriendRequest[]     @relation("requestSender")
  friendRequestsReceived FriendRequest[]     @relation("requestReceiver")
  friends           Friendship[]        @relation("userFriends")
  friendsOf         Friendship[]        @relation("friendsOfUser")
  participations    Participation[]
  pageViews         PageView[]
  events            EventLog[]
  passwordResetToken PasswordResetToken?
  twoFactorToken    TwoFactorToken?
  
  // Relations for profile data
  educationEntries  Education[]
  experienceEntries Experience[]
  skillEntries      Skill[]
  socialLinks       SocialLink[]
  
  // NextAuth relations
  accounts      Account[]
  sessions      Session[]
}

// New model for Education
model Education {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  school      String
  degree      String
  field       String
  startDate   DateTime
  endDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// New model for Experience
model Experience {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  company     String
  location    String
  startDate   DateTime
  endDate     DateTime?
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// New model for Skills
model Skill {
  id        String    @id @default(uuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// New model for Social Links
model SocialLink {
  id        String    @id @default(uuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  platform  String    // e.g., "portfolio", "linkedin", "github", "twitter"
  url       String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// Organization model
model Organization {
  id                String              @id @default(uuid())
  name              String              @unique
  description       String
  logo              String?
  website           String?
  history           String?
  termsOfService    String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  opportunities     Opportunity[]
  followers         Follow[]
}

// Opportunity model
model Opportunity {
  id                String              @id @default(uuid())
  title             String
  description       String
  shortDescription  String
  eligibility       String
  applicationProcess String
  benefits          String
  contactInfo       String
  externalLink      String?
  deadline          DateTime
  startDate         DateTime?
  endDate           DateTime?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  status            OpportunityStatus   @default(ACTIVE)
  categoryId        String
  category          Category            @relation(fields: [categoryId], references: [id])
  visitCount        Int                 @default(0)
  isPopular         Boolean             @default(false)
  isNew             Boolean             @default(true)
  organizationId    String
  organization      Organization        @relation(fields: [organizationId], references: [id])
  bookmarks         Bookmark[]
  applications      Application[]
  participations    Participation[]
}

// Category model for dynamic opportunity categories
model Category {
  id                String              @id @default(uuid())
  name              String              @unique
  description       String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  opportunities     Opportunity[]
}

// Bookmark model
model Bookmark {
  id                String              @id @default(uuid())
  createdAt         DateTime            @default(now())
  userId            String
  user              User                @relation(fields: [userId], references: [id])
  opportunityId     String
  opportunity       Opportunity         @relation(fields: [opportunityId], references: [id])

  @@unique([userId, opportunityId])
}

// Application model for tracking applications
model Application {
  id                String              @id @default(uuid())
  statusId          String
  status            ApplicationStatusType @relation(fields: [statusId], references: [id])
  feedback          String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  userId            String
  user              User                @relation(fields: [userId], references: [id])
  opportunityId     String
  opportunity       Opportunity         @relation(fields: [opportunityId], references: [id])

  @@unique([userId, opportunityId])
}

// Application Status Type model for dynamic application statuses
model ApplicationStatusType {
  id                String              @id @default(uuid())
  isApplied         Boolean             @default(false)
  isConfirm         Boolean             @default(true)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  applications      Application[]
}

// Follow model for users following organizations
model Follow {
  id                String              @id @default(uuid())
  createdAt         DateTime            @default(now())
  userId            String
  user              User                @relation("userFollows", fields: [userId], references: [id])
  organizationId    String
  organization      Organization        @relation(fields: [organizationId], references: [id])

  @@unique([userId, organizationId])
}

// Friend Request model
model FriendRequest {
  id                String              @id @default(uuid())
  status            FriendRequestStatus @default(PENDING)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  senderId          String
  sender            User                @relation("requestSender", fields: [senderId], references: [id])
  receiverId        String
  receiver          User                @relation("requestReceiver", fields: [receiverId], references: [id])

  @@unique([senderId, receiverId])
}

// Friendship model to track established friendships
model Friendship {
  id                String              @id @default(uuid())
  createdAt         DateTime            @default(now())
  userId            String
  user              User                @relation("userFriends", fields: [userId], references: [id])
  friendId          String
  friend            User                @relation("friendsOfUser", fields: [friendId], references: [id])

  @@unique([userId, friendId])
}

// Participation model to track user participation in opportunities
model Participation {
  id                String              @id @default(uuid())
  year              Int
  feedback          String?
  privacyLevel      PrivacyLevel        @default(ONLY_ME)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  userId            String
  user              User                @relation(fields: [userId], references: [id])
  opportunityId     String
  opportunity       Opportunity         @relation(fields: [opportunityId], references: [id])

  @@unique([userId, opportunityId])
}

// Notification model
model Notification {
  id                String              @id @default(uuid())
  type              NotificationType
  message           String
  isRead            Boolean             @default(false)
  createdAt         DateTime            @default(now())
  userId            String
  user              User                @relation(fields: [userId], references: [id])
  relatedEntityId   String?             // Can be an opportunityId, organizationId, etc.
}

// PageView model for tracking page visits
model PageView {
  id                String              @id @default(uuid())
  path              String              // URL path
  userId            String?             // Optional - only for logged in users
  user              User?               @relation(fields: [userId], references: [id], onDelete: SetNull)
  sessionId         String              // Anonymous session tracking
  referrer          String?             // Where user came from
  userAgent         String?             // Browser info
  device            String?             // Device type (mobile, desktop, tablet)
  createdAt         DateTime            @default(now())
}

// EventLog for tracking user actions
model EventLog {
  id                String              @id @default(uuid())
  eventType         String              // Type of event (e.g., "opportunity_view", "application_submit")
  userId            String?             // Optional - only for logged in users
  user              User?               @relation(fields: [userId], references: [id], onDelete: SetNull)
  sessionId         String              // Anonymous session tracking
  entityId          String?             // ID of related entity (opportunity, organization, etc.)
  entityType        String?             // Type of entity (e.g., "opportunity", "organization")
  metadata          Json?               // Additional event data
  createdAt         DateTime            @default(now())
}

// DailyStats for aggregated metrics
model DailyStats {
  id                String              @id @default(uuid())
  date              DateTime            @unique // Date for these stats (time part is zeroed)
  pageViews         Int                 @default(0)
  uniqueVisitors    Int                 @default(0)
  newUsers          Int                 @default(0)
  applications      Int                 @default(0)
  bookmarks         Int                 @default(0)
  opportunityViews  Json?               // JSON object with opportunity ID to view count
  categoryViews     Json?               // JSON object with category ID to view count
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

// Enums
enum PrivacyLevel {
  PUBLIC
  ONLY_ME
  FRIENDS_ONLY
}

enum TwoFactorMethod {
  EMAIL
}

enum OpportunityStatus {
  OPENING_SOON
  ACTIVE
  CLOSING_SOON
  CLOSED
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
  CANCELED
}

enum NotificationType {
  NEW_OPPORTUNITY
  DEADLINE_REMINDER
  APPLICATION_UPDATE
  FRIEND_REQUEST
  ORGANIZATION_UPDATE
}

// Password Reset Token model
model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  expires   DateTime
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

// Two Factor Authentication Token model
model TwoFactorToken {
  id        String   @id @default(uuid())
  code      String   @unique
  expires   DateTime
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}